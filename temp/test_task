namespace TestTask
{
    public static class Utility
    {
        public static void BubbleSort(int[] arr)
        {
            int endIndex = arr.Length;
            do
            {
                for (int i = 0; i < endIndex - 1; i++)
                {
                    if (arr[i] > arr[i + 1])
                    {
                        var temp = arr[i];
                        arr[i] = arr[i + 1];
                        arr[i + 1] = temp;
                    }
                }
                endIndex--;
            }
            while (endIndex > 0);

        }
        public static void HalfSort(int[] sourceArray, out int[] resultFirst, out int[] resultSecond, int startIndex, int endIndex)
        {

            int pivotPoint = (startIndex < endIndex) ? (endIndex + startIndex) / 2 : 0;
            if (pivotPoint == 0)
            {
                resultFirst = null;
                resultSecond = null;
                return;
            }
            else
            {
                resultFirst = new int[pivotPoint - startIndex + 1];
                resultSecond = new int[endIndex - pivotPoint];
                int j = 0;
                for (int i = startIndex; i <= pivotPoint; i++)
                {
                    resultFirst[j++] = sourceArray[i];
                }
                j = 0;
                for (int i = pivotPoint + 1; i < endIndex; i++)
                {
                    resultSecond[j++] = sourceArray[i];
                }
                BubbleSort(resultFirst);
                BubbleSort(resultSecond);

            }
        }
        public static int[] SortMerge(int[] _arr, int startIndex, int endIndex)
        {
            // var arr = (int[])(_arr.Clone());

            HalfSort(_arr, out int[] firstArray, out int[] secondArray, startIndex, endIndex);
            if (firstArray == null) return null;
            int[] result = new int[firstArray.Length + secondArray.Length];
            for (int i = 0; i < firstArray.Length; i++)
            {
                result[i] = firstArray[i];
            }
            int j = firstArray.Length;
            for (int i = 0; i < secondArray.Length; i++)
            {
                result[j++] = secondArray[i];
            }
            return result;
        }
    }
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            int[] a = new int[] { 1,6,3,4,8,1,9,0};
            int startIndex = 0;
            int endIndex = a.Length - 1;
            string result = Utility.SortMerge(a, startIndex, endIndex) != null? string.Join(',', Utility.SortMerge(a,startIndex,endIndex)):"Начальный индекс больше конечного";
            string source = string.Join(',', a);
            MessageBox.Show("Source: " + source); // 1,6,3,4,8,1,9,0
            MessageBox.Show("Sorted: " + result); // 1,3,4,6,0,1,8,9
        }
    }
}
